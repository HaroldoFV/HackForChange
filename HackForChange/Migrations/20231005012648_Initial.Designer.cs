// <auto-generated />
using System;
using HackForChange.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace HackForChange.Migrations
{
    [DbContext(typeof(HackForChangeContext))]
    [Migration("20231005012648_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("HackForChange.Domain.Entities.Mentor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Mentors");
                });

            modelBuilder.Entity("HackForChange.Domain.Entities.Scheduling", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AppointmentTimes")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ClosingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Schedulings");
                });

            modelBuilder.Entity("HackForChange.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("HackForChange.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("MentorSubject", b =>
                {
                    b.Property<Guid>("MentorsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SpecialtiesId")
                        .HasColumnType("uuid");

                    b.HasKey("MentorsId", "SpecialtiesId");

                    b.HasIndex("SpecialtiesId");

                    b.ToTable("MentorSubject");
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.Property<Guid>("DifficultSubjectsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("uuid");

                    b.HasKey("DifficultSubjectsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentSubject");
                });

            modelBuilder.Entity("HackForChange.Domain.Entities.Scheduling", b =>
                {
                    b.HasOne("HackForChange.Domain.Entities.Subject", "Subject")
                        .WithMany("Schedulings")
                        .HasForeignKey("SubjectId")
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("MentorSubject", b =>
                {
                    b.HasOne("HackForChange.Domain.Entities.Mentor", null)
                        .WithMany()
                        .HasForeignKey("MentorsId")
                        .IsRequired();

                    b.HasOne("HackForChange.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("SpecialtiesId")
                        .IsRequired();
                });

            modelBuilder.Entity("StudentSubject", b =>
                {
                    b.HasOne("HackForChange.Domain.Entities.Subject", null)
                        .WithMany()
                        .HasForeignKey("DifficultSubjectsId")
                        .IsRequired();

                    b.HasOne("HackForChange.Domain.Entities.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .IsRequired();
                });

            modelBuilder.Entity("HackForChange.Domain.Entities.Subject", b =>
                {
                    b.Navigation("Schedulings");
                });
#pragma warning restore 612, 618
        }
    }
}
